@page "/"
@using turing_machines

<PageTitle>Turing Machine</PageTitle>

<h1>Machine</h1>

<MudSelect ValueChanged="SelectedMachineChanged" T="string" Label="Machine type" AnchorOrigin="Origin.BottomCenter">
    <MudSelectItem Value="@(KnownMachineNames.IncreasingRunsOfOnesSeparatedByZeros)" />
    <MudSelectItem Value="@(KnownMachineNames.IncreasingNumberInPlace)" />
    <MudSelectItem Value="@(KnownMachineNames.SquareRootOf2)" />
</MudSelect>

@if(_machines != null){
    <MudTable Items="@_machines" Class="ma-3" Style="width: 70%">
        <ColGroup>
            <col style="width: 20px" />
            <col style="width: 20px" />
            <col style="width: 600px" />
            <col style="width: 20px" />
        </ColGroup>
        <HeaderContent>
            <MudTh>m-config</MudTh>
            <MudTh>symbol</MudTh>
            <MudTh>operation</MudTh>
            <MudTh>final m-config</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTh DataLabel="m-config">@context.MConfig</MudTh>
            <MudTh DataLabel="symbol">
                <table>
                    @foreach (var s in context.Behaviours)
                    {
                        <tr>
                            <td>@s.Key</td>
                        </tr>
                    }
                </table>
            </MudTh>
            <MudTh DataLabel="operation">
                <table>
                    @foreach (var s in context.Behaviours)
                    {
                        <tr>
                            <td>@string.Join(", ", s.Value.operations.Select(x => x.DisplayValue()))</td>
                        </tr>
                    }
                </table>
            </MudTh>
            <MudTh DataLabel="m-config">
                <table>
                    @foreach (var s in context.Behaviours)
                    {
                        <tr>
                            <td>@s.Value.finalMConfig</td>
                        </tr>
                    }
                </table>
            </MudTh>
        </RowTemplate>
    </MudTable>
    
    <MudGrid Spacing="1" Justify="Justify.FlexStart" class="ma-3 border-solid border mud-border-primary">
        @for (var i = 0; i < _currentTape.Length; i++)
        {
            var character = _currentTape[i];
            if (i == _currentIndex)
            {
                <MudItem>
                    <MudPaper Style="text-align: center" height="40px" width="30px" class="pa-2 mud-theme-primary border-solid border-2 mud-border-primary">
                        <MudText Style="font-weight: bold">@character</MudText>
                    </MudPaper>
                </MudItem>
            }
            else
            {
                <MudItem>
                    <MudPaper Style="text-align: center" height="40px" width="30px" class="pa-2 border-solid border-2 mud-border-primary">
                        <MudText Style="font-weight: bold">@character</MudText>
                    </MudPaper>
                </MudItem>
            }
        }
    </MudGrid>
    
    <MudButton Disabled="MoveButtonDisabled" Class="ma-3" Variant="Variant.Filled" Color="@Color.Primary" OnClick="@Move">Move</MudButton>
    <MudButton Disabled="AutoButtonDisabled" Class="ma-3" Variant="Variant.Filled" Color="@Color.Primary" OnClick="@AutoMove">
            @if (_autoButtonProcessing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Moving...</MudText>
            }
            else
            {
                <MudText>Auto</MudText>
            }
    </MudButton>
}

@code {
    private Machine[]? _machines;
    private MachineRunner? _machineRunner;
    private bool MoveButtonDisabled => _machineRunner == null || _autoButtonProcessing;
    private bool AutoButtonDisabled => _machineRunner == null;
    private bool _autoButtonProcessing;
    private CancellationTokenSource? _autoMovingCancellationTokenSource;
    private char[] _currentTape = Array.Empty<char>();
    private int _currentIndex;
    private MachineRunner.MachineState _state = MachineRunner.MachineState.Empty;

    private Task AutoMove()
    {
        if (_autoButtonProcessing)
        {
            _autoMovingCancellationTokenSource?.Cancel();

            _autoButtonProcessing = false;
            
            return Task.CompletedTask;
        }

        _autoMovingCancellationTokenSource = new CancellationTokenSource();
        
        return InvokeAsync(async () =>
        {
            _autoButtonProcessing = true;
            
            while (!_autoMovingCancellationTokenSource.IsCancellationRequested)
            {
                if (_machineRunner == null)
                {
                    return;
                }

                var result = _machineRunner.Move(_state);
                if (result.IsT1)
                {
                    Console.WriteLine(result.AsT1.Value);
                    _autoButtonProcessing = false;
                    break;
                }

                if (!result.AsT0.ShouldContinue)
                {
                    _autoButtonProcessing = false;
                    break;
                }

                _state = result.AsT0;

                Print(_state.Tape);

                await Task.Delay(150);
            }
            
            _autoButtonProcessing = false;
        });
    }
    private void Move()
    {
        if (_machineRunner == null)
        {
            return;
        }
        
        var result = _machineRunner.Move(_state);
        if (result.IsT1)
        {
            Console.WriteLine(result.AsT1.Value);
            return;
        }

        if (!result.AsT0.ShouldContinue)
        {
            return;
        }

        _state = result.AsT0;

        Print(_state.Tape);
    }
    
    private void Print(Tape tape)
    {
        InvokeAsync(() =>
        {
            _currentTape = tape.ToArray();
            _currentIndex = tape.CurrentIndex;
        });
        
        StateHasChanged();
    }
    
    private static class KnownMachineNames
    {
        public const string IncreasingRunsOfOnesSeparatedByZeros = "Increasing runs of ones separated by zeros";
        public const string IncreasingNumberInPlace = "Increasing number in place";
        public const string SquareRootOf2 = "Square root of 2";

        public static Machine[] NameToMachine(string name) => name switch {
            IncreasingRunsOfOnesSeparatedByZeros => KnownMachines.IncreasingRunsOfOnesSeparatedByZeros,
            IncreasingNumberInPlace => KnownMachines.IncreasingNumberInPlace,
            SquareRootOf2 => KnownMachines.SquareRootOf2,
            _ => throw new ArgumentOutOfRangeException(nameof(name), name, null)
            };
    }

    private Task SelectedMachineChanged(string arg)
    {
        var machine = KnownMachineNames.NameToMachine(arg);
        return InvokeAsync(() =>
        {
            _machines = machine;
            _machineRunner = new MachineRunner(machine);
            _currentTape = Array.Empty<char>();
            _currentIndex = 0;
        });
    }

}


<style>
    td {
      border: 1px;
      padding: 5px;
    }
</style>